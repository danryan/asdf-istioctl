#!/usr/bin/env bash

set \
-x \
  -o nounset \
  -o pipefail \

# required environment variables
: ${ASDF_INSTALL_TYPE?}
: ${ASDF_INSTALL_VERSION?}
: ${ASDF_INSTALL_PATH?}

readonly __dirname="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# make a temporary download directory with a cleanup hook
readonly TMP_DOWNLOAD_DIR="$(mktemp -d -t "asdf_istioctl_XXXXXX")"
trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

install() {
  local install_type="$1"
  local version="$2"
  local install_path="$3"

  local bin_install_path="${install_path}/bin"

  local download_url="$(get_download_url "${version}")"
  local download_path="${TMP_DOWNLOAD_DIR}/$(get_filename "${version}")"

  local source_path="${TMP_DOWNLOAD_DIR}/istioctl"

  if curl -fs -L "${download_url}" -o "${download_path}"; then

    echo "Extracting istioctl archive"
    mkdir -p "${source_path}"

    echo "Cleaning istioctl previous binaries"
    rm -rf "${bin_install_path?}"

    echo "Creating istioctl bin directory"
    mkdir -p "${bin_install_path}"

    #  version 0.3.0 and above started packaging the tarballs differently
    local bin_source_path

    if lt_version_0_3_0 "${version}"; then
      local bin_source_path="${source_path}/istio-${version}/bin"
    else 
      local bin_source_path="${source_path}/bin"
    fi

    tar zxf "${download_path}" -C "${source_path}" --strip-components=1 || exit 1
    local binary_path="${bin_source_path}/istioctl"

    if [[ -f "${binary_path}" ]] && [[ -x "${binary_path}" ]]; then
      cp "${binary_path}" "${bin_install_path}"
    fi
  else 
    echo "Error: istioctl version ${version} not found" >&2
    exit 1
  fi

  sleep 300
}

get_platform() {
  local arch=$(uname -m)
  if [[ "$arch" != "x86_64" ]]; then
    echo "istioctl only supports 64-bit architecture"
    exit 1
  fi

  local os=$(uname -s | tr '[:upper:]' '[:lower:]')

  if [[ "$os" == "darwin" ]]; then
    echo "osx"
    return 0
  fi

  
  if [[ "$os" == "linux" ]]; then
    echo "linux"
    return 0
  fi

  echo "Could not determine OS platform"
  exit 1
}

get_filename() {
  local version="$1"
  local platform="$(get_platform)"

  echo "istio-${version}-${platform}.tar.gz"
}

get_download_url() {
  local version="$1"
  local filename="$(get_filename $version)"

  echo "https://github.com/istio/istio/releases/download/${version}/${filename}"
}

lt_version_0_3_0() {
  local version="${1//./ }"

  local minor=$(echo "${version}" | awk '{print $2}')

  if [[ "${minor}" -lt 3 ]]; then
    return 0
  fi

  return 1
}

install $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
